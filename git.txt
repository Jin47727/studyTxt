Git命令:
初始化一个git仓库: git init
把文件添加到仓库:
	git add **  ( 可反复多次使用,添加多个文件)
	git commit -m   ""   (-m后面输入的是本次提交的说明)
查看当前仓库状态: git status  (在提交之前用)
产看具体修改的内容: git diff **   (在提交之前用)
查看操作日志: git log      粗略列表:git log --pretty=oneline
版本回退:git reset --hard "版本号"      (不管之前还是之后,有版本号就行)
记录每一次命令: git reflog
后悔药:
	没add前:git checkout -- **.txt
	add后但没commit:git reset HEAD **.txt   然后用上面那步.
删除文件:
	工作区: rm **.txt
		后悔:git checkout -- **.txt   (其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除)
	确认删除仓库的:git rm **.txt    然后 git commit -m **

远程仓库:
	创建SSH Key:ssh-keygen -t rsa -C "youremail@example.com"  (一直enter,创建在主用户目录的.ssh中,把公用的放到GitHub中)
	在github中建仓库:
	 git remote add origin git@github.com：Jin47727/test.git  (不能有空格)
	 git push -u origin master    (在github上就看到本地一样了,第一次用-u)
提交到远程仓库:git push origin master	
克隆远程仓库到本地:
	git clone git@github.com:Jin47727/testclone.git (后面是仓库地址,本地打开git的地址就是目的地)

分支管理:    (在其他分支上干活,不影响master分支)
	1.分支操作	
	创建分支:git branch *  
	切换分支:git checkout * 
		综上2个:git checkout -b ** 
	查看分支:git branch   (列出所有分支,当前的分支有一个*在前)
	合并分支:git merge *  (把*这个分支合并到当前所在的分支)
	删除分支:git branch -d *
	2.冲突:
	两边都修改同一个文件,都提交后就报错.查看文件看到变化,修改后提交
	查看日志:git log     查看合并情况:git log --graph
	查看简略合并信息:git log --graph --pretty=oneline --abbrev-commit
	3.分支管理策略
	git merge --no-ff -m "merge with no-ff" dev	
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，	能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	4.bug分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，
		修复后，再git stash pop，回到工作现场。
	储存工作现场：git status
	查看储存：git stash list
	恢复工作现场：git stash apply  (多个就加参数名)
				  git stash pop   (同上，但是删除list中内容)
	删除list中内容：git stash drop
	5.feature分支
	开发新功能，创建分支，开发完毕后，老板说不要了。普通删除会报错
	强行删除：git branch -D **
	5.多人协作
	查看远程仓库信息：git remote  （-v  详细）

